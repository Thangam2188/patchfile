name: Upload Patch Script and Patch List

on:
  workflow_dispatch:

jobs:
  upload_script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Generate MFA Code and Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: ${{ secrets.MFA_SERIAL_ARN }}
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          echo "Generated MFA Code: $MFA_CODE"

          CREDS=$(aws sts get-session-token \
            --serial-number $MFA_SERIAL_ARN \
            --token-code $MFA_CODE \
            --duration-seconds 3600 \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Configure AWS CLI with Temporary Credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_session_token=${{ env.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config

      - name: Upload Patch File and Script to EC2 Instances
        run: |
          for INSTANCE_ID in $(cat instance.txt); do
            echo "Uploading to instance: $INSTANCE_ID"

            PATCH_FILE="${INSTANCE_ID}_patches.txt"
            SCRIPT_FILE="install_security_patches.py"

            if [[ ! -f "$PATCH_FILE" ]]; then
              echo "Patch file $PATCH_FILE not found. Skipping."
              continue
            fi

            echo "Uploading patch list..."
            aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Create patch list" \
              --parameters "commands=[
                'mkdir -p /usr/bin/patchscript',
                'cat <<EOF > /usr/bin/patchscript/${PATCH_FILE}',
                '$(sed 's/"/\\"/g' $PATCH_FILE)',
                'EOF'
              ]" \
              --query "Command.CommandId" \
              --output text

            echo "Uploading install script..."
            aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Upload install script" \
              --parameters "commands=[
                'cat <<EOF > /usr/bin/patchscript/install_security_patches.py',
                '$(sed 's/"/\\"/g' install_security_patches.py)',
                'EOF',
                'chmod +x /usr/bin/patchscript/install_security_patches.py'
              ]" \
              --query "Command.CommandId" \
              --output text
          done
