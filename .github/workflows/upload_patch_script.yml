name: Upload Patch Files and Install Script to EC2

on:
  workflow_dispatch:

jobs:
  upload_patch_script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Generate MFA Code and Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
          AWS_DEFAULT_REGION: us-east-1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          TEMP_CREDS=$(aws sts get-session-token \
            --serial-number $MFA_SERIAL_ARN \
            --token-code $MFA_CODE \
            --duration-seconds 3600 \
            --output json)
          echo "AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Configure AWS CLI with Temporary Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp-mfa
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp-mfa
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp-mfa
          aws configure set region us-east-1 --profile temp-mfa

      - name: Upload Patch Files and Python Installer to EC2
        run: |
          for INSTANCE_ID in $(cat instance.txt); do
            echo "📦 Uploading to instance: $INSTANCE_ID"
            PATCH_FILE="${INSTANCE_ID}_patches.txt"
            PY_SCRIPT="install_security_patches.py"

            if [[ ! -f "$PATCH_FILE" || ! -f "$PY_SCRIPT" ]]; then
              echo "⚠️ Skipping $INSTANCE_ID — missing $PATCH_FILE or $PY_SCRIPT"
              continue
            fi

            # Prepare patch file content
            PATCH_CONTENT=$(sed 's/["`$\\]/\\&/g' "$PATCH_FILE" | sed ':a;N;$!ba;s/\n/\\n/g')

            echo "📝 Uploading patch file..."
            aws ssm send-command \
              --region us-east-1 \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Upload patch file" \
              --parameters "commands=[
                'mkdir -p /usr/bin/patchscript',
                'echo -e \"$PATCH_CONTENT\" > /usr/bin/patchscript/${PATCH_FILE}'
              ]" \
              --query "Command.CommandId" \
              --output text

            # Prepare Python installer script
            SCRIPT_CONTENT=$(sed 's/["`$\\]/\\&/g' "$PY_SCRIPT" | sed ':a;N;$!ba;s/\n/\\n/g')

            echo "🐍 Uploading install_security_patches.py..."
            aws ssm send-command \
              --region us-east-1 \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Upload Python patch installer" \
              --parameters "commands=[
                'echo -e \"$SCRIPT_CONTENT\" > /usr/bin/patchscript/install_security_patches.py',
                'chmod +x /usr/bin/patchscript/install_security_patches.py'
              ]" \
              --query "Command.CommandId" \
              --output text
          done
