name: Snapshot, Install Windows Patches & Commit Logs

on:
  schedule:
    - cron: '0 3 * * 0'   # every Sunday @ 03:00 UTC
  workflow_dispatch:

jobs:
  patch_windows_and_backup:
    runs-on: ubuntu-latest

    steps:
    # ──────────────────────────────── 1. CODE CHECKOUT ───────────────────────────
      - name: Checkout repo
        uses: actions/checkout@v2

    # ───────────────────────────── 2. TOOLS & AWS CLI INSTALL ────────────────────
      - name: Install AWS CLI & tools
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq curl unzip
          curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          unzip -oq awscliv2.zip
          sudo ./aws/install --update
          aws --version

    # ─────────────────────────── 3. GET TEMP MFA CREDENTIALS ─────────────────────
      - name: Get temporary AWS creds via MFA
        id: mfa
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          CREDS=$(aws sts get-session-token \
            --serial-number "$MFA_SERIAL_ARN" \
            --token-code "$MFA_CODE" \
            --duration-seconds 3600 \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' <<<"$CREDS")" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' <<<"$CREDS")" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' <<<"$CREDS")" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV

    # ───────────────────────────── 4. CONFIGURE AWS CLI ───────────────────────────
      - name: Configure AWS CLI
        env:
          AWS_ACCESS_KEY_ID:     ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN:     ${{ env.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION:    ${{ env.AWS_DEFAULT_REGION }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp
          aws configure set region $AWS_DEFAULT_REGION --profile temp

    # ──────────────────────── 5. SNAPSHOT + PATCH INSTALLATION ───────────────────
      - name: Snapshot & install patches
        env:
          AWS_PROFILE: temp
        run: |
          > Windows_backup.txt
          while IFS= read -r INSTANCE_ID || [[ -n "$INSTANCE_ID" ]]; do
            echo "▶ Processing $INSTANCE_ID"

            # Check if instance is registered with SSM
            SSM_ONLINE=$(aws ssm describe-instance-information \
              --query "InstanceInformationList[?InstanceId=='$INSTANCE_ID'] | length(@)" \
              --output text)
            if [[ "$SSM_ONLINE" -eq 0 ]]; then
              echo "⚠️ Skipping $INSTANCE_ID — not available in SSM"
              continue
            fi

            # 5-a. Create AMI snapshot
            AMI_ID=$(aws ec2 create-image \
              --instance-id "$INSTANCE_ID" \
              --name "pre-patch-win-$INSTANCE_ID-$(date +%s)" \
              --no-reboot \
              --query ImageId --output text)
            echo "$INSTANCE_ID - $AMI_ID" >> Windows_backup.txt

            # 5-b. Run patch-installer from specific path
            CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunPowerShellScript" \
              --parameters '{"commands":["powershell.exe -ExecutionPolicy Bypass -File C:\\Windows\\system32\\Patch\\Execution\\install_windows_patches.ps1"]}' \
              --query 'Command.CommandId' \
              --output text)

            # 5-c. Wait for completion (max ~10 min)
            for i in {1..30}; do
              ST=$(aws ssm get-command-invocation \
                    --command-id "$CMD_ID" \
                    --instance-id "$INSTANCE_ID" \
                    --query Status --output text)
              echo "   Status: $ST"
              [[ "$ST" == "Success" ]] && break
              [[ "$ST" =~ ^(Failed|Cancelled|TimedOut)$ ]] && break
              sleep 20
            done

            # 5-d. Fetch and store installer output
            LOG=$(aws ssm get-command-invocation \
                    --command-id "$CMD_ID" \
                    --instance-id "$INSTANCE_ID" \
                    --query StandardOutputContent \
                    --output text)
            echo "$LOG" > "${INSTANCE_ID}_patch_log.txt"
            echo "✔ Log saved for $INSTANCE_ID"
          done < Instance_windows.txt

    # ──────────────────────────── 6. COMMIT RESULTS TO GIT ────────────────────────
      - name: Commit backup & logs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Windows_backup.txt *_patch_log.txt
          git commit -m "Windows patch backups & logs" || echo "No changes to commit"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:main
