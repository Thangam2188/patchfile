name: Snapshot, Install Windows Patches & Commit Logs

on:
  schedule:
    - cron: '0 3 * * 0'  # Every Sunday at 3 AM UTC
  workflow_dispatch:

jobs:
  patch_windows_and_backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install AWS CLI & Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          unzip -o awscliv2.zip && sudo ./aws/install --update

      - name: Get temporary AWS creds via MFA
        id: mfa
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          CREDS=$(aws sts get-session-token \
            --serial-number $MFA_SERIAL_ARN --token-code $MFA_CODE \
            --duration-seconds 3600 --output json)
          echo "AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId<<<"$CREDS")" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey<<<"$CREDS")" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken<<<"$CREDS")" >> $GITHUB_ENV

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp
          aws configure set region us-east-1 --profile temp

      - name: Snapshot & Install Patches
        env:
          AWS_PROFILE: temp
        run: |
          > backup.txt
          for INSTANCE_ID in $(cat instance.txt); do
            echo "Processing $INSTANCE_ID"

            # 1. AMI snapshot
            AMI_ID=$(aws ec2 create-image \
              --instance-id "$INSTANCE_ID" \
              --name "pre-patch-win-$INSTANCE_ID-$(date +%s)" \
              --no-reboot --query ImageId --output text)
            echo "$INSTANCE_ID - $AMI_ID" >> backup.txt

            # 2. Execute installer
            CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunPowerShellScript" \
              --parameters commands=["powershell.exe -ExecutionPolicy Bypass -File C:\\Scripts\\install_windows_patches.ps1"] \
              --query "Command.CommandId" --output text)

            # 3. Wait & fetch logs
            for i in {1..30}; do
              ST=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$INSTANCE_ID" \
                  --query Status --output text)
              echo "  Status: $ST"
              [[ "$ST" == "Success" ]] && break
              [[ "$ST" =~ ^(Failed|Cancelled|TimedOut)$ ]] && break
              sleep 20
            done

            OUTPUT=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$INSTANCE_ID" \
              --query StandardOutputContent --output text)
            echo "$OUTPUT" > "${INSTANCE_ID}_patch_log.txt"
          done

      - name: Commit Backup & Logs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add backup.txt *_patch_log.txt
          git commit -m "Windows patch backups & logs" || echo "No changes"
          git push
