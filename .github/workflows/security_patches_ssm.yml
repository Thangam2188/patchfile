name: Run Security Patches Check on EC2 via SSM

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1' # Run every Monday at midnight UTC

jobs:
  run_patches_script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq awscli

      - name: Generate MFA Code and Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: "arn:aws:iam::472598590798:mfa/TESTGIT1"
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          # Generate the MFA code using oathtool
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          echo "Generated MFA Code: $MFA_CODE"

          # Attempt to get temporary credentials and capture any errors
          TEMP_CREDS=$(aws sts get-session-token --serial-number $MFA_SERIAL_ARN --token-code $MFA_CODE --duration-seconds 3600 --output json)
          STATUS=$?

          # Debugging: Print the result of aws sts get-session-token
          echo "TEMP_CREDS response: $TEMP_CREDS"

          # Check if the command was successful
          if [ $STATUS -ne 0 ]; then
            echo "Error obtaining temporary credentials: $TEMP_CREDS"
            exit $STATUS
          fi

          # Parse and set temporary credentials as environment variables
          echo "AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Configure AWS CLI with Temporary Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp-mfa
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp-mfa
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp-mfa
          aws configure set region us-east-1 --profile temp-mfa

      - name: Run the Security Patches Script via SSM
        env:
          AWS_PROFILE: temp-mfa
          BUCKET_NAME: "testpatchscript"
        run: |
          # Define instance ID and script location
          INSTANCE_ID="i-008e8f3c90e3bee1a"
          S3_BUCKET="$BUCKET_NAME"
          SCRIPT_PATH="/tmp/check_security_patches.sh"

          # Upload the script to the instance
          echo "Uploading script to SSM..."
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --comment "Uploading patch script" \
            --parameters "commands=[\"cat > $SCRIPT_PATH <<'EOF'\",$(cat check_security_patches.sh),\"chmod +x $SCRIPT_PATH\"]" \
            --output text

          # Run the script on the EC2 instance
          echo "Running patch check script on EC2..."
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --comment "Check critical and important security patches and upload results to S3" \
            --parameters "commands=[\"$SCRIPT_PATH\"]" \
            --output text

          echo "Security patches script executed via SSM."
