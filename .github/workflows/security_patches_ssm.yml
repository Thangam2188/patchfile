name: Run Security Patches Check and Commit Output

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC

jobs:
  run_patches_script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Generate MFA Code and Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
          AWS_DEFAULT_REGION: us-east-1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          echo "Generated MFA Code: $MFA_CODE"

          TEMP_CREDS=$(aws sts get-session-token --serial-number $MFA_SERIAL_ARN --token-code $MFA_CODE --duration-seconds 3600 --output json)
          echo "AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Configure AWS CLI with Temporary Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp-mfa
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp-mfa
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp-mfa
          aws configure set region us-east-1 --profile temp-mfa

      - name: Run Security Patch Script on Multiple EC2 Instances via SSM
        env:
          AWS_PROFILE: temp-mfa
        run: |
          OUTPUT_FILE=instance_patches.txt
          : > $OUTPUT_FILE

          while IFS= read -r INSTANCE_ID || [[ -n "$INSTANCE_ID" ]]; do
            echo "Processing Instance: $INSTANCE_ID"

            echo "Uploading patch script to $INSTANCE_ID..."
            aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Upload patch script" \
              --parameters 'commands=[
                "cat <<EOF | sudo tee /usr/bin/check_security_patches.sh",
                "#!/bin/bash",
                "OUTPUT_FILE=/usr/bin/security_patches.txt",
                "sudo touch $OUTPUT_FILE",
                "sudo chmod 644 $OUTPUT_FILE",
                "if command -v yum &>/dev/null; then",
                "  sudo yum --disablerepo=docker-ce-stable-debuginfo updateinfo list security all | grep -E '\''Critical|Important'\'' > $OUTPUT_FILE",
                "elif command -v dnf &>/dev/null; then",
                "  sudo dnf --disablerepo=docker-ce-stable-debuginfo updateinfo list security all | grep -E '\''Critical|Important'\'' > $OUTPUT_FILE",
                "else",
                "  echo '\''Error: yum or dnf not found'\'' > $OUTPUT_FILE",
                "fi",
                "echo '\''Security patch check completed'\'' >> $OUTPUT_FILE",
                "EOF",
                "sudo chmod +x /usr/bin/check_security_patches.sh"
              ]' \
              --profile temp-mfa \
              --output text

            echo "Executing patch script..."
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "sudo /usr/bin/check_security_patches.sh"
              ]' \
              --query "Command.CommandId" \
              --profile temp-mfa \
              --output text)

            echo "Waiting for script to complete..."
            aws ssm wait command-executed \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --profile temp-mfa

            echo "Fetching result from $INSTANCE_ID..."
            RESULT_COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["sudo cat /usr/bin/security_patches.txt"]' \
              --query "Command.CommandId" \
              --profile temp-mfa \
              --output text)

            aws ssm wait command-executed \
              --command-id "$RESULT_COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --profile temp-mfa

            PATCH_RESULT=$(aws ssm get-command-invocation \
              --command-id "$RESULT_COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "StandardOutputContent" \
              --profile temp-mfa \
              --output text)

            echo -e "\nInstance: $INSTANCE_ID" >> $OUTPUT_FILE
            echo "$PATCH_RESULT" >> $OUTPUT_FILE
            echo "----------------------------------" >> $OUTPUT_FILE
          done < instance.txt

      - name: Commit and Push Patch Output
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

          if [ -s instance_patches.txt ]; then
            git add instance_patches.txt
            git commit -m "Security patch results from EC2 instances" || echo "No changes to commit"
            git push origin HEAD:main
          else
            echo "⚠️ No data to commit."
