name: Run Security Patches Check and Commit Output

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC

jobs:
  patch_check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Generate MFA Code and Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          echo "Generated MFA Code: $MFA_CODE"

          TEMP_CREDS=$(aws sts get-session-token \
            --serial-number "$MFA_SERIAL_ARN" \
            --token-code "$MFA_CODE" \
            --duration-seconds 3600 \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Configure AWS CLI with Temporary Credentials
        run: |
          mkdir -p ~/.aws
          echo "[temp-mfa]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_session_token=${{ env.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials
          aws configure set region us-east-1 --profile temp-mfa

      - name: Run Security Patch Script on EC2 Instances
        env:
          AWS_PROFILE: temp-mfa
        run: |
          OUTPUT_FILE="instance_patches.txt"
          : > "$OUTPUT_FILE"

          while IFS= read -r INSTANCE_ID || [[ -n "$INSTANCE_ID" ]]; do
            echo "Processing Instance: $INSTANCE_ID"

            echo "Executing patch script..."
            PATCH_CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Run patch script" \
              --parameters commands=["sudo /usr/bin/check_security_patches.sh"] \
              --query "Command.CommandId" \
              --output text)

            echo "Waiting for patch command to complete..."
            aws ssm wait command-executed --command-id "$PATCH_CMD_ID" --instance-id "$INSTANCE_ID"

            echo "Fetching output..."
            OUT_CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Fetch patch output" \
              --parameters commands=["cat /usr/bin/instance_patches.txt"] \
              --query "Command.CommandId" \
              --output text)

            aws ssm wait command-executed --command-id "$OUT_CMD_ID" --instance-id "$INSTANCE_ID"

            PATCH_RESULT=$(aws ssm get-command-invocation \
              --command-id "$OUT_CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "StandardOutputContent" \
              --output text)

            echo -e "\nInstance: $INSTANCE_ID" >> "$OUTPUT_FILE"
            echo "$PATCH_RESULT" >> "$OUTPUT_FILE"
            echo "------------------------------------" >> "$OUTPUT_FILE"

            echo "Uploading patch list to EC2..."
            ESCAPED_CONTENT=$(cat "$OUTPUT_FILE" | sed 's/"/\\"/g')
            COPY_CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands="[
                \"mkdir -p /usr/bin/patchscript\",
                \"cat <<EOF > /usr/bin/patchscript/instance_patches.txt\",
                \"$ESCAPED_CONTENT\",
                \"EOF\"
              ]" \
              --query "Command.CommandId" \
              --output text)

            aws ssm wait command-executed --command-id "$COPY_CMD_ID" --instance-id "$INSTANCE_ID"
          done < instance.txt

      - name: Commit and Push Patch Output
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add instance_patches.txt
          git commit -m "Patch results from EC2 instances" || echo "No changes to commit"
          git pull --rebase
          git push origin HEAD:main
