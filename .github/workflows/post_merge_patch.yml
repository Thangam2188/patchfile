name: Post-Merge Patch Deploy

on:
  push:
    branches:
      - main
    paths:
      - instance_patches.txt

  # âœ… Add this to allow manual trigger from the GitHub UI
  workflow_dispatch:

jobs:
  deploy_patches:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Read EC2 instance ID
        id: read_instance
        run: |
          INSTANCE_ID=$(head -n 1 instance.txt)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Upload patch file to EC2
        run: |
          echo "Copying instance_patches.txt to EC2 instance..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Upload patch list" \
            --parameters 'commands=[
              "mkdir -p /usr/bin/patchscript",
              "cat <<EOF > /usr/bin/patchscript/instance_patches.txt",
              "'"$(cat instance_patches.txt | sed 's/"/\\"/g')"'",
              "EOF"
            ]' \
            --query "Command.CommandId" \
            --output text

      - name: Invoke Lambda to install patches
        id: invoke_lambda
        run: |
          echo "Triggering Lambda: installSecurityPatches"
          RESPONSE=$(aws lambda invoke \
            --function-name installSecurityPatches \
            --payload '{"instance_id": "'"$INSTANCE_ID"'"}' \
            response.json)
          cat response.json
          echo "Lambda invoked."

      - name: Get patch result from EC2
        run: |
          echo "Fetching patch install results..."
          PATCH_COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cat /usr/bin/patchscript/patch_status.txt"]' \
            --query "Command.CommandId" \
            --output text)

          aws ssm wait command-executed --command-id "$PATCH_COMMAND_ID" --instance-id "$INSTANCE_ID"

          RESULT=$(aws ssm get-command-invocation \
            --command-id "$PATCH_COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "StandardOutputContent" \
            --output text)

          echo "$RESULT" > patch_result.txt

      - name: Commit and Push patch result to GitHub
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add patch_result.txt
          git commit -m "Patch result uploaded after Lambda execution" || echo "No changes to commit"
          git push origin HEAD:main
