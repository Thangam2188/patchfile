name: Run Security Patches Check and Commit Output

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC

jobs:
  run_patches_script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Generate MFA Code and Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
          AWS_DEFAULT_REGION: us-east-1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          TEMP_CREDS=$(aws sts get-session-token \
            --serial-number $MFA_SERIAL_ARN \
            --token-code $MFA_CODE \
            --duration-seconds 3600 \
            --output json)
          echo "AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Configure AWS CLI with Temporary Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp-mfa
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp-mfa
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp-mfa
          aws configure set region us-east-1 --profile temp-mfa

      - name: Run Security Patch Script on EC2 Instances via SSM
        env:
          AWS_PROFILE: temp-mfa
        run: |
          GITHUB_SCRIPT_URL="https://raw.githubusercontent.com/Thangam2188/patchfile/main/check_security_patches.sh"

          while IFS= read -r INSTANCE_ID || [[ -n "$INSTANCE_ID" ]]; do
            echo "Processing Instance: $INSTANCE_ID"

            echo "Uploading and executing patch script..."
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Download and run patch check script" \
              --parameters "{\"commands\":[\"curl -o /usr/bin/check_security_patches.sh '$GITHUB_SCRIPT_URL'\",\"chmod +x /usr/bin/check_security_patches.sh\",\"sudo /usr/bin/check_security_patches.sh\"]}" \
              --query "Command.CommandId" \
              --output text)

            echo "Waiting for script to complete..."
            for i in {1..30}; do
              STATUS=$(aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$INSTANCE_ID" \
                --query "Status" --output text)

              echo "🔄 Command status: $STATUS"

              if [[ "$STATUS" == "Success" ]]; then
                echo "✅ Patch script succeeded for $INSTANCE_ID"
                break
              elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
                echo "❌ Patch script failed for $INSTANCE_ID"
                echo "Fetching logs..."
                aws ssm get-command-invocation \
                  --command-id "$COMMAND_ID" \
                  --instance-id "$INSTANCE_ID" \
                  --query "StandardErrorContent" \
                  --output text || echo "No stderr output"
                exit 1
              else
                sleep 10
              fi
            done

            echo "Fetching patch results..."
            FETCH_COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters "{\"commands\":[\"sudo cat /usr/bin/instance_patches.txt\"]}" \
              --query "Command.CommandId" \
              --output text)

            for j in {1..15}; do
              FETCH_STATUS=$(aws ssm get-command-invocation \
                --command-id "$FETCH_COMMAND_ID" \
                --instance-id "$INSTANCE_ID" \
                --query "Status" --output text)

              if [[ "$FETCH_STATUS" == "Success" ]]; then
                break
              elif [[ "$FETCH_STATUS" == "Failed" || "$FETCH_STATUS" == "Cancelled" || "$FETCH_STATUS" == "TimedOut" ]]; then
                echo "❌ Failed to fetch results for $INSTANCE_ID"
                exit 1
              else
                sleep 5
              fi
            done

            PATCH_RESULT=$(aws ssm get-command-invocation \
              --command-id "$FETCH_COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "StandardOutputContent" \
              --output text)

            echo "$PATCH_RESULT" > "${INSTANCE_ID}_patches.txt"
          done < instance.txt

      - name: Commit and Push Patch Output
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

          git pull --rebase origin main || true
          git add *_patches.txt
          git commit -m "Patch results from EC2 instances" || echo "No changes to commit"
          git push origin HEAD:main
