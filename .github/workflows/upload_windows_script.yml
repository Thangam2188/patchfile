name: Install Windows Patches & Fetch Scan Logs

on:
  workflow_dispatch: {}

jobs:
  install_and_fetch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install AWS CLI & tools
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Get temporary AWS credentials via MFA
        id: mfa
        env:
          MFA_SECRET:            ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN:        arn:aws:iam::472598590798:mfa/TESTGIT1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          CREDS=$(aws sts get-session-token \
            --serial-number "$MFA_SERIAL_ARN" \
            --token-code "$MFA_CODE" \
            --duration-seconds 3600 \
            --output json)
          echo "AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId <<<"$CREDS")"   >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey <<<"$CREDS")" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken <<<"$CREDS")"     >> $GITHUB_ENV

      - name: Configure AWS CLI profile
        run: |
          aws configure set aws_access_key_id     $AWS_ACCESS_KEY_ID     --profile temp
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp
          aws configure set aws_session_token     $AWS_SESSION_TOKEN     --profile temp
          aws configure set region                us-east-1              --profile temp

      - name: Install patches & retrieve scan log
        env:
          AWS_PROFILE: temp
        run: |
          BASE_URL="https://raw.githubusercontent.com/Thangam2188/patchfile/main"
          mkdir -p tmp-ssm

          while IFS= read -r INSTANCE_ID || [ -n "$INSTANCE_ID" ]; do
            echo "⏳ Processing $INSTANCE_ID"

            # build a per-instance JSON payload so we can pass InstanceId into the script
            cat <<EOF > tmp-ssm/params-${INSTANCE_ID}.json
{
  "commands": [
    "New-Item -Path 'C:\\Windows\\System32\\Patch\\Execution' -ItemType Directory -Force",
    "Invoke-WebRequest -Uri '${BASE_URL}/install_windows_patches.ps1' -OutFile 'C:\\Windows\\System32\\Patch\\Execution\\install_windows_patches.ps1'",
    "Unblock-File 'C:\\Windows\\System32\\Patch\\Execution\\install_windows_patches.ps1'",
    "powershell.exe -ExecutionPolicy Bypass -File 'C:\\Windows\\System32\\Patch\\Execution\\install_windows_patches.ps1' -InstanceId $INSTANCE_ID",
    "Get-Content -Path 'C:\\Windows\\System32\\Patch\\Execution\\${INSTANCE_ID}_patchscan.txt'"
  ]
}
EOF

            # send it
            CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunPowerShellScript" \
              --comment "Install patches + fetch log" \
              --parameters file://tmp-ssm/params-${INSTANCE_ID}.json \
              --query "Command.CommandId" --output text)

            # wait for completion (up to 10 minutes)
            for i in {1..60}; do
              STATUS=$(aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --query "Status" --output text)
              echo " • Status: $STATUS"
              [[ "$STATUS" == "Success" ]] && break
              [[ "$STATUS" =~ ^(Failed|Cancelled|TimedOut)$ ]] && { echo "❌ Failed on $INSTANCE_ID"; exit 1; }
              sleep 10
            done

            # grab the combined output (including the contents of the patchscan.txt)
            aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "StandardOutputContent" --output text \
              > "${INSTANCE_ID}_patchscan.txt"

            echo "✅ Retrieved ${INSTANCE_ID}_patchscan.txt"
          done < Instance_windows.txt

      - name: Commit & push scan logs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add *_patchscan.txt
          git commit -m "Windows patch install & scan logs" || echo "No changes to commit"
          git push
