name: Upload Patch Files, Install via Python, Snapshot & Rollback

on:
  schedule:
    - cron: '0 3 * * 0'  # Every Sunday at 3 AM UTC
  workflow_dispatch:

jobs:
  patch_and_rollback:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Generate MFA Code and Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
          AWS_DEFAULT_REGION: us-east-1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          CREDS=$(aws sts get-session-token \
            --serial-number $MFA_SERIAL_ARN \
            --token-code $MFA_CODE \
            --duration-seconds 3600)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV

      - name: Configure AWS CLI Profile
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp
          aws configure set region us-east-1 --profile temp

      - name: Upload Patch Script & Install
        env:
          AWS_PROFILE: temp
        run: |
          for INSTANCE_ID in $(cat instance.txt); do
            echo "üöÄ Processing instance: $INSTANCE_ID"

            echo "üì∏ Creating AMI snapshot before patching..."
            AMI_ID=$(aws ec2 create-image \
              --instance-id "$INSTANCE_ID" \
              --name "pre-patch-snapshot-$INSTANCE_ID-$(date +%s)" \
              --no-reboot \
              --query 'ImageId' --output text)
            echo "‚úÖ Snapshot AMI created: $AMI_ID"

            echo "üì§ Uploading patch list and installer..."
            PATCH_FILE="${INSTANCE_ID}_patches.txt"

            if [[ ! -f "$PATCH_FILE" || ! -f install_security_patches.py ]]; then
              echo "‚ùå Missing required file for $INSTANCE_ID"
              continue
            fi

            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --instance-ids "$INSTANCE_ID" \
              --comment "Upload patch file" \
              --parameters "commands=[
                'mkdir -p /usr/bin/patchscript',
                'cat <<EOF > /usr/bin/patchscript/${PATCH_FILE}',
                '$(cat ${PATCH_FILE})',
                'EOF'
              ]" --region us-east-1

            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --instance-ids "$INSTANCE_ID" \
              --comment "Upload Python installer" \
              --parameters "commands=[
                'cat <<EOF > /usr/bin/patchscript/install_security_patches.py',
                '$(cat install_security_patches.py)',
                'EOF',
                'chmod +x /usr/bin/patchscript/install_security_patches.py'
              ]" --region us-east-1

            echo "üõ†Ô∏è Running patch installer..."
            COMMAND_ID=$(aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --instance-ids "$INSTANCE_ID" \
              --parameters commands="[\"/usr/bin/patchscript/install_security_patches.py $INSTANCE_ID\"]" \
              --region us-east-1 \
              --query 'Command.CommandId' --output text)

            echo "‚è≥ Waiting for execution..."
            aws ssm wait command-executed \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --region us-east-1 || ROLLBACK_NEEDED=true

            if [[ "$ROLLBACK_NEEDED" == true ]]; then
              echo "üîÅ Rolling back to AMI: $AMI_ID"
              aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
              NEW_INSTANCE_ID=$(aws ec2 run-instances \
                --image-id "$AMI_ID" \
                --instance-type t3.medium \
                --count 1 \
                --subnet-id subnet-xxxxxxxx \
                --iam-instance-profile Name=EC2PatchProfile \
                --key-name my-key \
                --security-group-ids sg-xxxxxxxx \
                --query 'Instances[0].InstanceId' --output text)
              echo "‚úÖ Rolled back with new instance: $NEW_INSTANCE_ID"

              echo "üìß Sending SNS notification..."
              aws sns publish \
                --topic-arn arn:aws:sns:us-east-1:123456789012:RollbackAlerts \
                --subject "Rollback Triggered" \
                --message "Patch failed on $INSTANCE_ID. Reverted to AMI: $AMI_ID" \
                --region us-east-1
            else
              echo "‚úÖ Patch installation completed successfully on $INSTANCE_ID"
            fi
          done
