name: Upload and Run Patch Installer

on:
  workflow_dispatch:

jobs:
  patch_and_upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup AWS CLI and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool jq unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Generate MFA & Get Temporary AWS Credentials
        id: mfa_creds
        env:
          MFA_SECRET: ${{ secrets.MFA_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MFA_SERIAL_ARN: arn:aws:iam::472598590798:mfa/TESTGIT1
        run: |
          MFA_CODE=$(oathtool --base32 --totp "$MFA_SECRET")
          echo "Generated MFA Code: $MFA_CODE"

          CREDS=$(aws sts get-session-token \
            --serial-number $MFA_SERIAL_ARN \
            --token-code $MFA_CODE \
            --duration-seconds 3600 \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile temp-mfa
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile temp-mfa
          aws configure set aws_session_token $AWS_SESSION_TOKEN --profile temp-mfa
          aws configure set region us-east-1 --profile temp-mfa

      - name: Upload patch files and install script to EC2
        env:
          AWS_PROFILE: temp-mfa
        run: |
          for INSTANCE_ID in $(cat instance.txt); do
            echo "üì¶ Uploading to instance: $INSTANCE_ID"

            PATCH_FILE="${INSTANCE_ID}_patches.txt"
            SHELL_SCRIPT="install_security_patches.sh"

            if [[ ! -f "$PATCH_FILE" || ! -f "$SHELL_SCRIPT" ]]; then
              echo "‚ùå Missing file: $PATCH_FILE or $SHELL_SCRIPT"
              exit 1
            fi

            PATCH_ESCAPED=$(sed 's/["`$\\]/\\&/g' "$PATCH_FILE" | sed ':a;N;$!ba;s/\n/\\n/g')
            SCRIPT_ESCAPED=$(sed 's/["`$\\]/\\&/g' "$SHELL_SCRIPT" | sed ':a;N;$!ba;s/\n/\\n/g')

            aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters "commands=[
                \"sudo mkdir -p /usr/bin/patchscript\",
                \"echo -e \\\"$PATCH_ESCAPED\\\" > /usr/bin/patchscript/${PATCH_FILE}\",
                \"echo -e \\\"$SCRIPT_ESCAPED\\\" > /usr/bin/patchscript/install_security_patches.sh\",
                \"chmod +x /usr/bin/patchscript/install_security_patches.sh\"
              ]" \
              --output text \
              --region us-east-1
          done

      - name: Execute patch installer and fetch logs
        env:
          AWS_PROFILE: temp-mfa
        run: |
          for INSTANCE_ID in $(cat instance.txt); do
            echo "üîß Running patch installer on $INSTANCE_ID"

            CMD_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters "commands=[\"/usr/bin/patchscript/install_security_patches.sh $INSTANCE_ID\"]" \
              --query "Command.CommandId" \
              --output text)

            echo "‚è≥ Waiting for command to complete..."
            if ! aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "$INSTANCE_ID"; then
              echo "‚ùå Patch script failed for $INSTANCE_ID"
            fi

            echo "üìÑ Fetching logs..."
            INVOCATION=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --output json)

            echo "$INVOCATION" | jq -r '.StandardOutputContent' > "${INSTANCE_ID}_patch_log.txt"
            echo "‚ö†Ô∏è STDERR:"
            echo "$INVOCATION" | jq -r '.StandardErrorContent'
          done

      - name: Commit patch logs to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main || true
          git add *_patch_log.txt
          git commit -m "Patch install logs from EC2" || echo "No changes"
          git push origin HEAD:main
